// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all pets
	// (GET /pets)
	ListPets(c *gin.Context, params ListPetsParams)
	// Create a pet
	// (POST /pets)
	CreatePets(c *gin.Context)
	// Info for a specific pet
	// (GET /pets/{petId})
	ShowPetById(c *gin.Context, petId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListPets operation middleware
func (siw *ServerInterfaceWrapper) ListPets(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPetsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPets(c, params)
}

// CreatePets operation middleware
func (siw *ServerInterfaceWrapper) CreatePets(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePets(c)
}

// ShowPetById operation middleware
func (siw *ServerInterfaceWrapper) ShowPetById(c *gin.Context) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Param("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter petId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ShowPetById(c, petId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/pets", wrapper.ListPets)
	router.POST(options.BaseURL+"/pets", wrapper.CreatePets)
	router.GET(options.BaseURL+"/pets/:petId", wrapper.ShowPetById)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVTW/bOBD9K8TsHnYB1ZKTm25NEaAG2qBAcgt8YKWRzFT8CDlybBj678WQsp3ESnJo",
	"CuRkkh7Om3nvDbWDympnDRoKUO4gVCvUMi4vvbeeF85bh54UxuPK1si/jfVaEpSgDJ2fQQa0dZi22KKH",
	"IQONIcg2Ro9/BvLKtDAMGXi875XHGsrblPMYvzwksz/vsCLOdYUPP5BOyzFSTwFkQLJ9GzjenoKbxFL1",
	"JNKflaBqyF6tI0ET6rj412MDJfyTH3XLR9FyLpppl5tFCp8XxSGn9F5uYWB4ZRrLuTpVoQl4pBG+L25i",
	"4Yo63l4/yLZFL7gKsp41WqMPyhooYT4rZgVHW4dGOgUlnMejDJykVaw2d2P9beKT2ZSkrFnUUMI3FSg2",
	"yDe81EjoA5S3O6gxVF45Skhf7YPQ0mxFZEGQFR6p90ZIEtagIKVR/KflRsyL4n/gBqGE+x79ds9tCZ3S",
	"iiAbHT7pYC03Svf6KW8HPw9LFi44a0Kyw1lRpIEwhCa2J53rVBUbzO8C1757hPeGdCGJ87T1z8LJFmsR",
	"1RO2ES7xtUJZR7J2sPlkcBPhn1/tlPnFbNEKBcfEXJzk2MZjPp77NFXTyL6jd+szPSoTjfYGNw4rwlrg",
	"GJNB6LWWfjtaRciu2/dPsmWnQNwuhwycDRMO++JREo4e46nDQBe23r5bP+OzNDydavI9DidumZ9qdNV3",
	"3UEN+EB8J+KEZL5P6R6yNNn5ziEt6uHFCb9eWebnYruo3xrymxUKVbM72a4OaZxzr3CN+5nmh+U40hEc",
	"nhP/mqX/8ghPEX25p3kPzH1JsZad4rNoyY+k/MI0VjTWCymCw0o1qnrBBHwN/XovZ+87KGFF5Mo8uoO/",
	"GLOQPiEzZfP1HIbl8DsAAP//GcCD2XIIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
